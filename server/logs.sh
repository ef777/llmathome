#!/bin/bash
# logs.sh - Kodlama Asistanƒ± Log G√∂r√ºnt√ºleme Script'i

# Renk kodlarƒ±
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Parametreler
LINES=${1:-20}  # Varsayƒ±lan olarak son 20 satƒ±r
MODE=${2:-all}   # all, flask, nginx, errors, live

show_help() {
    echo -e "${CYAN}üìã Kodlama Asistanƒ± Log G√∂r√ºnt√ºleme${NC}"
    echo -e "${CYAN}===================================${NC}"
    echo ""
    echo "Kullanƒ±m: ./logs.sh [satƒ±r_sayƒ±sƒ±] [mod]"
    echo ""
    echo "Satƒ±r sayƒ±sƒ±: G√∂sterilecek log satƒ±rƒ± (varsayƒ±lan: 20)"
    echo "Mod se√ßenekleri:"
    echo "  all     - T√ºm loglar (varsayƒ±lan)"
    echo "  flask   - Sadece Flask/WebSocket loglarƒ±"
    echo "  nginx   - Sadece Nginx loglarƒ±"
    echo "  errors  - Sadece hata loglarƒ±"
    echo "  live    - Canlƒ± log takibi"
    echo ""
    echo "√ñrnekler:"
    echo "  ./logs.sh 50        # Son 50 satƒ±r"
    echo "  ./logs.sh 100 flask # Flask loglarƒ±ndan son 100 satƒ±r"
    echo "  ./logs.sh 0 live    # Canlƒ± log takibi"
    echo ""
    exit 0
}

# Yardƒ±m parametresi kontrol
if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    show_help
fi

echo -e "${CYAN}üìã Kodlama Asistanƒ± Loglarƒ±${NC}"
echo -e "${CYAN}==========================${NC}"
echo -e "${BLUE}$(date '+%Y-%m-%d %H:%M:%S')${NC}"
echo ""

# Canlƒ± log takibi
if [[ "$MODE" == "live" ]]; then
    echo -e "${GREEN}üî¥ Canlƒ± log takibi ba≈ülatƒ±lƒ±yor...${NC}"
    echo -e "${YELLOW}√áƒ±kmak i√ßin Ctrl+C basƒ±n${NC}"
    echo ""
    
    # Birden fazla log dosyasƒ±nƒ± takip et
    tail -f \
        /var/log/kodlama-asistani/error.log \
        /var/log/kodlama-asistani/access.log \
        /var/log/nginx/error.log \
        /var/log/nginx/access.log \
        2>/dev/null &
    
    # systemd journal'ƒ± da takip et
    sudo journalctl -u kodlama-asistani -f --no-pager &
    
    # Kullanƒ±cƒ± Ctrl+C basana kadar bekle
    trap 'echo -e "\n${GREEN}Log takibi durduruldu${NC}"; pkill -P $$; exit 0' INT
    wait
    exit 0
fi

# Log dosyasƒ± kontrol√º fonksiyonu
check_log_file() {
    local file=$1
    local name=$2
    
    if [ -f "$file" ] && [ -r "$file" ]; then
        local size=$(du -sh "$file" 2>/dev/null | cut -f1)
        local lines=$(wc -l < "$file" 2>/dev/null)
        echo -e "  ‚úÖ ${GREEN}$name: $size ($lines satƒ±r)${NC}"
        return 0
    else
        echo -e "  ‚ùå ${RED}$name: Bulunamadƒ± veya okunamƒ±yor${NC}"
        return 1
    fi
}

# Log dosyalarƒ±nƒ±n durumunu kontrol et
echo -e "${PURPLE}üìÅ LOG DOSYALARI${NC}"
echo -e "${CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"

check_log_file "/var/log/kodlama-asistani/error.log" "Flask Error Log"
check_log_file "/var/log/kodlama-asistani/access.log" "Flask Access Log"
check_log_file "/var/log/nginx/error.log" "Nginx Error Log"
check_log_file "/var/log/nginx/access.log" "Nginx Access Log"

# systemd journal kontrol√º
echo -n "  üìã Systemd Journal: "
if sudo journalctl -u kodlama-asistani --lines=1 >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Eri≈üilebilir${NC}"
else
    echo -e "${RED}‚ùå Eri≈üim sorunu${NC}"
fi

echo ""

# Flask/WebSocket loglarƒ±
if [[ "$MODE" == "all" ]] || [[ "$MODE" == "flask" ]]; then
    echo -e "${PURPLE}üåê FLASK/WEBSOCKET SERVER LOGLARI (Son $LINES)${NC}"
    echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..50})${NC}"
    
    if sudo journalctl -u kodlama-asistani --lines="$LINES" --no-pager >/dev/null 2>&1; then
        sudo journalctl -u kodlama-asistani --lines="$LINES" --no-pager | while IFS= read -r line; do
            # Renklendirme
            if echo "$line" | grep -qi "error\|failed\|exception"; then
                echo -e "${RED}$line${NC}"
            elif echo "$line" | grep -qi "warning\|warn"; then
                echo -e "${YELLOW}$line${NC}"
            elif echo "$line" | grep -qi "info\|started\|success"; then
                echo -e "${GREEN}$line${NC}"
            else
                echo "$line"
            fi
        done
    else
        echo -e "${RED}‚ùå Flask servis loglarƒ± okunamƒ±yor${NC}"
    fi
    
    echo ""
    
    # Uygulama error log (eƒüer varsa)
    if [ -f "/var/log/kodlama-asistani/error.log" ]; then
        echo -e "${PURPLE}üî¥ UYGULAMA HATA LOGLARI (Son $LINES)${NC}"
        echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..40})${NC}"
        sudo tail -n "$LINES" /var/log/kodlama-asistani/error.log | while IFS= read -r line; do
            echo -e "${RED}$line${NC}"
        done
        echo ""
    fi
fi

# Nginx loglarƒ±
if [[ "$MODE" == "all" ]] || [[ "$MODE" == "nginx" ]]; then
    echo -e "${PURPLE}üåê NGINX ERROR LOGLARI (Son $LINES)${NC}"
    echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..35})${NC}"
    
    if [ -f "/var/log/nginx/error.log" ]; then
        sudo tail -n "$LINES" /var/log/nginx/error.log | while IFS= read -r line; do
            if echo "$line" | grep -qi "error"; then
                echo -e "${RED}$line${NC}"
            elif echo "$line" | grep -qi "warn"; then
                echo -e "${YELLOW}$line${NC}"
            else
                echo "$line"
            fi
        done
    else
        echo -e "${RED}‚ùå Nginx error log bulunamadƒ±${NC}"
    fi
    
    echo ""
    
    echo -e "${PURPLE}üîç NGINX ACCESS LOGLARI (Son $LINES)${NC}"
    echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..35})${NC}"
    
    if [ -f "/var/log/nginx/access.log" ]; then
        sudo tail -n "$LINES" /var/log/nginx/access.log | while IFS= read -r line; do
            # HTTP status koduna g√∂re renklendirme
            if echo "$line" | grep -q '" 2[0-9][0-9] '; then
                echo -e "${GREEN}$line${NC}"
            elif echo "$line" | grep -q '" 3[0-9][0-9] '; then
                echo -e "${BLUE}$line${NC}"
            elif echo "$line" | grep -q '" 4[0-9][0-9] '; then
                echo -e "${YELLOW}$line${NC}"
            elif echo "$line" | grep -q '" 5[0-9][0-9] '; then
                echo -e "${RED}$line${NC}"
            else
                echo "$line"
            fi
        done
    else
        echo -e "${RED}‚ùå Nginx access log bulunamadƒ±${NC}"
    fi
    
    echo ""
fi

# Sadece hata loglarƒ±
if [[ "$MODE" == "errors" ]]; then
    echo -e "${PURPLE}üî¥ T√úM HATA LOGLARI (Son $LINES)${NC}"
    echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..30})${NC}"
    
    # Flask hatalarƒ±nƒ± topla
    echo -e "${BLUE}üì± Flask Hatalarƒ±:${NC}"
    sudo journalctl -u kodlama-asistani --lines="$LINES" --no-pager | grep -i "error\|exception\|failed" | tail -n 10 | while IFS= read -r line; do
        echo -e "${RED}  $line${NC}"
    done
    
    echo ""
    
    # Nginx hatalarƒ±nƒ± topla
    echo -e "${BLUE}üåê Nginx Hatalarƒ±:${NC}"
    if [ -f "/var/log/nginx/error.log" ]; then
        sudo tail -n "$LINES" /var/log/nginx/error.log | grep -i "error" | tail -n 10 | while IFS= read -r line; do
            echo -e "${RED}  $line${NC}"
        done
    fi
    
    echo ""
    
    # 4xx ve 5xx HTTP hatalarƒ±nƒ± topla
    echo -e "${BLUE}üîç HTTP Hatalarƒ±:${NC}"
    if [ -f "/var/log/nginx/access.log" ]; then
        sudo tail -n "$LINES" /var/log/nginx/access.log | grep -E '" [45][0-9][0-9] ' | tail -n 10 | while IFS= read -r line; do
            echo -e "${YELLOW}  $line${NC}"
        done
    fi
    
    echo ""
fi

# Log istatistikleri
if [[ "$MODE" == "all" ]]; then
    echo -e "${PURPLE}üìä LOG ƒ∞STATƒ∞STƒ∞KLERƒ∞${NC}"
    echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..25})${NC}"
    
    # Bug√ºnk√º aktiviteler
    TODAY=$(date +'%Y-%m-%d')
    echo -e "  üìÖ Bug√ºn ($TODAY):"
    
    # HTTP istekleri
    if [ -f "/var/log/nginx/access.log" ]; then
        TODAY_REQUESTS=$(sudo grep "$(date +'%d/%b/%Y')" /var/log/nginx/access.log | wc -l)
        echo -e "    üìä HTTP ƒ∞stekleri: ${BLUE}$TODAY_REQUESTS${NC}"
        
        # HTTP status kodu daƒüƒ±lƒ±mƒ±
        if [ "$TODAY_REQUESTS" -gt 0 ]; then
            HTTP_200=$(sudo grep "$(date +'%d/%b/%Y')" /var/log/nginx/access.log | grep '" 200 ' | wc -l)
            HTTP_404=$(sudo grep "$(date +'%d/%b/%Y')" /var/log/nginx/access.log | grep '" 404 ' | wc -l)
            HTTP_500=$(sudo grep "$(date +'%d/%b/%Y')" /var/log/nginx/access.log | grep '" 500 ' | wc -l)
            
            echo -e "      ${GREEN}200 OK: $HTTP_200${NC}"
            if [ "$HTTP_404" -gt 0 ]; then
                echo -e "      ${YELLOW}404 Not Found: $HTTP_404${NC}"
            fi
            if [ "$HTTP_500" -gt 0 ]; then
                echo -e "      ${RED}500 Server Error: $HTTP_500${NC}"
            fi
        fi
    fi
    
    # Hata sayƒ±larƒ±
    if [ -f "/var/log/nginx/error.log" ]; then
        TODAY_ERRORS=$(sudo grep "$(date +'%Y/%m/%d')" /var/log/nginx/error.log | wc -l)
        echo -e "    üî¥ Nginx Hatalarƒ±: ${RED}$TODAY_ERRORS${NC}"
    fi
    
    # Flask hatalarƒ±
    TODAY_FLASK_ERRORS=$(sudo journalctl -u kodlama-asistani --since="today" --no-pager | grep -ci "error\|exception" || echo "0")
    echo -e "    üî¥ Flask Hatalarƒ±: ${RED}$TODAY_FLASK_ERRORS${NC}"
    
    echo ""
    
    # Son 1 saatteki aktivite
    echo -e "  üïê Son 1 saat:"
    
    if [ -f "/var/log/nginx/access.log" ]; then
        HOUR_REQUESTS=$(sudo tail -n 10000 /var/log/nginx/access.log | grep "$(date -d '1 hour ago' +'%d/%b/%Y:%H')\|$(date +'%d/%b/%Y:%H')" | wc -l)
        echo -e "    üìä HTTP ƒ∞stekleri: ${BLUE}$HOUR_REQUESTS${NC}"
    fi
    
    # Unique IP adresleri (son 1000 istek)
    if [ -f "/var/log/nginx/access.log" ]; then
        UNIQUE_IPS=$(sudo tail -n 1000 /var/log/nginx/access.log | awk '{print $1}' | sort | uniq | wc -l)
        echo -e "    üåê Farklƒ± IP: ${BLUE}$UNIQUE_IPS${NC}"
    fi
    
    echo ""
    
    # Top IP adresleri (son 1000 istek)
    echo -e "  üîù En Aktif IP'ler (Son 1000 istek):"
    if [ -f "/var/log/nginx/access.log" ]; then
        sudo tail -n 1000 /var/log/nginx/access.log | awk '{print $1}' | sort | uniq -c | sort -nr | head -5 | while read count ip; do
            echo -e "    ${BLUE}$ip${NC}: $count istek"
        done
    fi
    
    echo ""
    
    # En √ßok istenen sayfalar
    echo -e "  üìÑ En √áok ƒ∞stenen Sayfalar (Son 1000 istek):"
    if [ -f "/var/log/nginx/access.log" ]; then
        sudo tail -n 1000 /var/log/nginx/access.log | awk '{print $7}' | sort | uniq -c | sort -nr | head -5 | while read count path; do
            echo -e "    ${BLUE}$path${NC}: $count istek"
        done
    fi
    
    echo ""
fi

# Log dosyasƒ± boyutlarƒ± ve rotasyon bilgisi
echo -e "${PURPLE}üíæ LOG DOSYASI Bƒ∞LGƒ∞LERƒ∞${NC}"
echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..30})${NC}"

# Dosya boyutlarƒ±
echo "  üìä Dosya boyutlarƒ±:"
for log_file in "/var/log/nginx/access.log" "/var/log/nginx/error.log" "/var/log/kodlama-asistani/error.log" "/var/log/kodlama-asistani/access.log"; do
    if [ -f "$log_file" ]; then
        size=$(du -sh "$log_file" 2>/dev/null | cut -f1)
        lines=$(wc -l < "$log_file" 2>/dev/null)
        echo -e "    $(basename "$log_file"): ${YELLOW}$size${NC} ($lines satƒ±r)"
    fi
done

# Rotasyon bilgisi
echo ""
echo "  üîÑ Log rotasyonu:"
if [ -f "/etc/logrotate.d/kodlama-asistani" ]; then
    echo -e "    ‚úÖ ${GREEN}Otomatik rotasyon aktif${NC}"
else
    echo -e "    ‚ö†Ô∏è ${YELLOW}Otomatik rotasyon ayarlanmamƒ±≈ü${NC}"
fi

# Disk kullanƒ±mƒ± uyarƒ±sƒ±
TOTAL_LOG_SIZE=$(du -sb /var/log/nginx/ /var/log/kodlama-asistani/ 2>/dev/null | awk '{total += $1} END {print total/1024/1024}')
if (( $(echo "$TOTAL_LOG_SIZE > 100" | bc -l) )); then
    echo -e "    ‚ö†Ô∏è ${YELLOW}Toplam log boyutu: ${TOTAL_LOG_SIZE}MB (>100MB)${NC}"
    echo -e "    üí° ${BLUE}Log temizliƒüi √∂nerilir${NC}"
fi

echo ""

# Hƒ±zlƒ± komutlar
echo -e "${PURPLE}üéÆ HIZLI KOMUTLAR${NC}"
echo -e "${CYAN}$(printf '‚îÄ%.0s' {1..20})${NC}"
echo -e "  ${BLUE}./logs.sh 50${NC} - Son 50 satƒ±r"
echo -e "  ${BLUE}./logs.sh 100 flask${NC} - Flask loglarƒ±ndan 100 satƒ±r"
echo -e "  ${BLUE}./logs.sh 0 live${NC} - Canlƒ± log takibi"
echo -e "  ${BLUE}./logs.sh 20 errors${NC} - Sadece hatalar"
echo -e "  ${BLUE}sudo journalctl -u kodlama-asistani -f${NC} - Flask canlƒ± takip"
echo -e "  ${BLUE}sudo tail -f /var/log/nginx/access.log${NC} - Nginx canlƒ± takip"

echo ""

# Log temizleme uyarƒ±sƒ± (eƒüer gerekirse)
if (( $(echo "$TOTAL_LOG_SIZE > 500" | bc -l) )); then
    echo -e "${RED}‚ö†Ô∏è Dƒ∞KKAT: Log dosyalarƒ± √ßok b√ºy√ºk (${TOTAL_LOG_SIZE}MB)${NC}"
    echo -e "${YELLOW}Log temizliƒüi yapmanƒ±z √∂nerilir:${NC}"
    echo -e "  ${BLUE}sudo journalctl --vacuum-time=7d${NC} - 7 g√ºnden eski journal'larƒ± sil"
    echo -e "  ${BLUE}sudo logrotate -f /etc/logrotate.d/kodlama-asistani${NC} - Zorla rotasyon"
    echo ""
fi

echo -e "${GREEN}üìã Log g√∂r√ºnt√ºleme tamamlandƒ±!${NC}"

exit 0